//CITATIONS:

//Implementing RedBlack trees in JavaScript
//Class Slides 96-146 4 - Balanced Trees.pdf
//https://www.sahinarslan.tech/posts/deep-dive-into-data-structures-using-javascript-red-black-tree
//https://www.youtube.com/watch?v=IDqdf7VicDs
//https://dev.to/igorok/javascript-red-black-tree-4703
//https://www.programiz.com/dsa/red-black-tree
//https://mgechev.github.io/javascript-algorithms/data-structures_red-black-tree.js.html
//https://github.com/liubinyi/red-black-tree-js/blob/master/src/createNode.js
//https://www.growingwiththeweb.com/data-structures/red-black-tree/overview/


class orderedPokeMap{
    get(key) {
        let node = this.root;
        if(key<node.key){
            node = this.root.left;
        }
        if(key>node.key){
            node = this.root.right;
        }

        if(node == null || key == node.key){
            return orderedPokeMap[node.key];
        }

        return;
    }

    inorder(node, allNames){
        if(node == null){
            return;
        }

        this.inorder(node.left, allNames);
        allNames.push(node.key);
        console.log("Node key:", node.key);
        this.inorder(node.right, allNames);

    }

    getAllNames(){
        
        let allNames = [];

       this.inorder(this.root, allNames);

        //allNames.push("meow");

        console.log("Names:", allNames);

        return allNames;

    }

}
/*

class orderedPokeMap{
    constructor() {
        this.orderedMap = {};
    }
  
    insert(key, value) {
        this.orderedMap[key] = value;
    }

    get(key) {
        return this.orderedMap[key];
    }

    getAllNames() {
        return Object.keys(this.orderedMap);
    }

  }
*/
function comparePokemon(a,b){
    if(a.name < b.name) {
        return -1;
    }
    if(a.name > b.name) {
        return 1;
    }
    return 0;
}

let pokeOrderedMap = new orderedPokeMap();

async function getSortedData(){
    pokeOrderedMap = new orderedPokeMap();
    try{
        const pokeJson = await fetch('allPokemonData.json');
        if (!pokeJson.ok){
            throw new Error('Cannot capture pokemon');
        }
        const pokeData = await pokeJson.json();
        pokeData.sort(comparePokemon);
        //Gets pokemon data from JSON
        pokeData.forEach(pokemon => {
            pokeOrderedMap.insert(pokemon.name, {
                name: pokemon.name,
                type: pokemon.type,
                weaknesses: pokemon.weaknesses,
                resistances: pokemon.resistances,
                sprite: pokemon.sprite

                
            }
            );
        });

    } catch (error){
        console.error(error);
    }
    console.log("getSortedData completed");
    return pokeOrderedMap.getAllNames();
}
